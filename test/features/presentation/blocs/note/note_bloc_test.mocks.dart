// Mocks generated by Mockito 5.4.4 from annotations
// in note_app/test/features/presentation/blocs/note/note_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:note_app/core/util/util.dart' as _i6;
import 'package:note_app/features/domain/entities/note.dart' as _i7;
import 'package:note_app/features/domain/repositories/repositories.dart' as _i2;
import 'package:note_app/features/domain/usecases/add_note.dart' as _i9;
import 'package:note_app/features/domain/usecases/detele_note.dart' as _i11;
import 'package:note_app/features/domain/usecases/get_note_by_id.dart' as _i8;
import 'package:note_app/features/domain/usecases/get_notes.dart' as _i4;
import 'package:note_app/features/domain/usecases/update_note.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNoteRepositories_0 extends _i1.SmartFake
    implements _i2.NoteRepositories {
  _FakeNoteRepositories_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetNotesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNotesUsecase extends _i1.Mock implements _i4.GetNotesUsecase {
  MockGetNotesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NoteRepositories get noteRepositories => (super.noSuchMethod(
        Invocation.getter(#noteRepositories),
        returnValue: _FakeNoteRepositories_0(
          this,
          Invocation.getter(#noteRepositories),
        ),
      ) as _i2.NoteRepositories);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Note>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Note>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Note>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Note>>>);
}

/// A class which mocks [GetNoteByIdUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNoteByIdUsecase extends _i1.Mock
    implements _i8.GetNoteByIdUsecase {
  MockGetNoteByIdUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NoteRepositories get noteRepositories => (super.noSuchMethod(
        Invocation.getter(#noteRepositories),
        returnValue: _FakeNoteRepositories_0(
          this,
          Invocation.getter(#noteRepositories),
        ),
      ) as _i2.NoteRepositories);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Note>> call(String? noteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noteId],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Note>>.value(
            _FakeEither_1<_i6.Failure, _i7.Note>(
          this,
          Invocation.method(
            #call,
            [noteId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Note>>);
}

/// A class which mocks [AddNoteUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddNoteUsecase extends _i1.Mock implements _i9.AddNoteUsecase {
  MockAddNoteUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NoteRepositories get noteRepositories => (super.noSuchMethod(
        Invocation.getter(#noteRepositories),
        returnValue: _FakeNoteRepositories_0(
          this,
          Invocation.getter(#noteRepositories),
        ),
      ) as _i2.NoteRepositories);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(_i7.Note? note) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [note],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [note],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}

/// A class which mocks [UpdateNoteUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateNoteUsecase extends _i1.Mock implements _i10.UpdateNoteUsecase {
  MockUpdateNoteUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NoteRepositories get noteRepositories => (super.noSuchMethod(
        Invocation.getter(#noteRepositories),
        returnValue: _FakeNoteRepositories_0(
          this,
          Invocation.getter(#noteRepositories),
        ),
      ) as _i2.NoteRepositories);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(_i7.Note? note) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [note],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [note],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}

/// A class which mocks [DeleteNoteUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteNoteUsecase extends _i1.Mock implements _i11.DeleteNoteUsecase {
  MockDeleteNoteUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NoteRepositories get noteRepositories => (super.noSuchMethod(
        Invocation.getter(#noteRepositories),
        returnValue: _FakeNoteRepositories_0(
          this,
          Invocation.getter(#noteRepositories),
        ),
      ) as _i2.NoteRepositories);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(String? noteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noteId],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [noteId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}
