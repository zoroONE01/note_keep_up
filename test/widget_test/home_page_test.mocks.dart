// Mocks generated by Mockito 5.4.4 from annotations
// in note_app/test/widget_test/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:flutter/material.dart' as _i7;
import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:note_app/features/domain/entities/note.dart' as _i9;
import 'package:note_app/features/domain/usecases/add_note.dart' as _i4;
import 'package:note_app/features/domain/usecases/detele_note.dart' as _i6;
import 'package:note_app/features/domain/usecases/get_note_by_id.dart' as _i3;
import 'package:note_app/features/domain/usecases/get_notes.dart' as _i2;
import 'package:note_app/features/domain/usecases/update_note.dart' as _i5;
import 'package:note_app/features/presentation/blocs/note/note_bloc.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNotesUsecase_0 extends _i1.SmartFake
    implements _i2.GetNotesUsecase {
  _FakeGetNotesUsecase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetNoteByIdUsecase_1 extends _i1.SmartFake
    implements _i3.GetNoteByIdUsecase {
  _FakeGetNoteByIdUsecase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddNoteUsecase_2 extends _i1.SmartFake
    implements _i4.AddNoteUsecase {
  _FakeAddNoteUsecase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateNoteUsecase_3 extends _i1.SmartFake
    implements _i5.UpdateNoteUsecase {
  _FakeUpdateNoteUsecase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteNoteUsecase_4 extends _i1.SmartFake
    implements _i6.DeleteNoteUsecase {
  _FakeDeleteNoteUsecase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_5<T extends _i7.State<_i7.StatefulWidget>>
    extends _i1.SmartFake implements _i7.GlobalKey<T> {
  _FakeGlobalKey_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteBloc extends _i1.Mock implements _i8.NoteBloc {
  MockNoteBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNotesUsecase get getNotes => (super.noSuchMethod(
        Invocation.getter(#getNotes),
        returnValue: _FakeGetNotesUsecase_0(
          this,
          Invocation.getter(#getNotes),
        ),
      ) as _i2.GetNotesUsecase);

  @override
  _i3.GetNoteByIdUsecase get getNoteById => (super.noSuchMethod(
        Invocation.getter(#getNoteById),
        returnValue: _FakeGetNoteByIdUsecase_1(
          this,
          Invocation.getter(#getNoteById),
        ),
      ) as _i3.GetNoteByIdUsecase);

  @override
  _i4.AddNoteUsecase get addNote => (super.noSuchMethod(
        Invocation.getter(#addNote),
        returnValue: _FakeAddNoteUsecase_2(
          this,
          Invocation.getter(#addNote),
        ),
      ) as _i4.AddNoteUsecase);

  @override
  _i5.UpdateNoteUsecase get updateNote => (super.noSuchMethod(
        Invocation.getter(#updateNote),
        returnValue: _FakeUpdateNoteUsecase_3(
          this,
          Invocation.getter(#updateNote),
        ),
      ) as _i5.UpdateNoteUsecase);

  @override
  _i6.DeleteNoteUsecase get deleteNote => (super.noSuchMethod(
        Invocation.getter(#deleteNote),
        returnValue: _FakeDeleteNoteUsecase_4(
          this,
          Invocation.getter(#deleteNote),
        ),
      ) as _i6.DeleteNoteUsecase);

  @override
  set oldNote(_i9.Note? _oldNote) => super.noSuchMethod(
        Invocation.setter(
          #oldNote,
          _oldNote,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get currentColor => (super.noSuchMethod(
        Invocation.getter(#currentColor),
        returnValue: 0,
      ) as int);

  @override
  _i7.GlobalKey<_i7.ScaffoldState> get appScaffoldState => (super.noSuchMethod(
        Invocation.getter(#appScaffoldState),
        returnValue: _FakeGlobalKey_5<_i7.ScaffoldState>(
          this,
          Invocation.getter(#appScaffoldState),
        ),
      ) as _i7.GlobalKey<_i7.ScaffoldState>);

  @override
  _i8.NoteState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i10.dummyValue<_i8.NoteState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.NoteState);

  @override
  _i11.Stream<_i8.NoteState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i8.NoteState>.empty(),
      ) as _i11.Stream<_i8.NoteState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i8.NoteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i8.NoteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i8.NoteState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i8.NoteEvent>(
    _i12.EventHandler<E, _i8.NoteState>? handler, {
    _i12.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i12.Transition<_i8.NoteEvent, _i8.NoteState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void onChange(_i12.Change<_i8.NoteState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
